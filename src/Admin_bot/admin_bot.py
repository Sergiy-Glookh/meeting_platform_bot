import datetime
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram import Bot, Dispatcher, types
from bson import ObjectId
from src.db.connect import *
from api import get_info, get_street_list, get_city_ref
from aiogram.dispatcher.filters.state import State


from aiogram.dispatcher import FSMContext
from button import *
waiting_for_street = State()
previous_states = {}
previous_keyboard = None
storage = MemoryStorage()
bot = Bot(TOKEN_ADMIN_API)
dp = Dispatcher(bot, storage=storage)
user_states = {}
waiting_for_description = State()
current_datetime = datetime.datetime.now()

#previous_keyboard = None

cancel_requests = {}
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, Message

import uuid
from datetime import datetime

@dp.callback_query_handler(lambda c: c.data == 'back', state=['waiting_for_month', 'waiting_for_day', 'waiting_for_hour', 'waiting_for_minute', 'waiting_for_year'])
async def process_back_button(callback_query: CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    if current_state == 'waiting_for_minute':
        await state.set_state('waiting_for_hour')
        await bot.send_message(callback_query.message.chat.id, 'üïõ–í–∏–±–µ—Ä—ñ—Ç—å –≥–æ–¥–∏–Ω—É:', reply_markup=hour_keyboard)
    elif current_state == 'waiting_for_hour':
        await state.set_state('waiting_for_day')
        await bot.send_message(callback_query.message.chat.id, 'üåù–í–∏–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å:', reply_markup=day_keyboard)
    elif current_state == 'waiting_for_day':
        await state.set_state('waiting_for_month')
        await bot.send_message(callback_query.message.chat.id, 'üåù–í–∏–±–µ—Ä—ñ—Ç—å –º—ñ—Å—è—Ü—å:', reply_markup=month_keyboard)
    elif current_state == 'waiting_for_month':
        await state.set_state('waiting_for_year')
        await bot.send_message(callback_query.message.chat.id, 'üåç–í–∏–±–µ—Ä—ñ—Ç—å —Ä—ñ–∫:', reply_markup=year_keyboard)
    elif current_state == 'waiting_for_year':

        user_id = callback_query.from_user.id
        if user_id in previous_states:
            previous_state = previous_states[user_id]
            await state.set_state(previous_state['state'])
            await state.update_data(previous_state['data'])

            await bot.send_message(callback_query.message.chat.id, previous_state['text'], reply_markup=previous_state['keyboard'])
        else:
            await state.set_state('waiting_for_selected_town')
            await bot.send_message(callback_query.message.chat.id, 'üó∫Ô∏è–í–≤–µ–¥–∏ –Ω–∞–∑–≤—É –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É –¥–µ –±—É–¥–µ –∑—É—Å—Ç—Ä—ñ—á:')
    else:
        await state.set_state('waiting_for_selected_town')
        await bot.send_message(callback_query.message.chat.id, 'üó∫Ô∏è–í–≤–µ–¥–∏ –Ω–∞–∑–≤—É –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É –¥–µ –±—É–¥–µ –∑—É—Å—Ç—Ä—ñ—á:')

def is_valid_uuid(s):
    try:
        uuid.UUID(str(s), version=4)
        return True
    except ValueError:
        return False


@dp.message_handler(commands=['start'])
async def start_def(message: types.Message):
    await message.answer('–ü—Ä–∏–≤—ñ—Ç, —â–æ —Ö–æ—á–µ—à –∑—Ä–æ–±–∏—Ç–∏?ü§î', reply_markup=kb_client)

@dp.callback_query_handler(lambda c: c.data.startswith('view_meeting:'))
async def view_meeting_details(callback_query: CallbackQuery):
    meeting_id = callback_query.data.split(':')[1]
    user_id = callback_query.from_user.id

    if is_valid_uuid(meeting_id):

        meeting = collection.find_one({"_id": meeting_id})

        if meeting:

            meeting_name = meeting['meeting_name']
            city = meeting['city']
            region = meeting['region']
            datetime_str = meeting['datetime']


            meeting_datetime = datetime.strptime(datetime_str, '%Y-%m-%d %H:%M')


            response = f"–î–µ—Ç–∞–ª—ñ –ø—Ä–æ –∑—É—Å—Ç—Ä—ñ—á '{meeting_name}':\n"
            response += f"üìÖ –î–∞—Ç–∞ —Ç–∞ —á–∞—Å: {meeting_datetime}\n"
            response += f"üåç –ú—ñ—Å—Ç–æ: {city}, {region}"


            keyboard = InlineKeyboardMarkup().add(InlineKeyboardButton('‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='view_meetings'))


            await bot.send_message(user_id, response, reply_markup=keyboard)
        else:
            await bot.send_message(user_id, "–ó—É—Å—Ç—Ä—ñ—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")
    else:
        await bot.send_message(user_id, "–ù–µ–¥—ñ–π—Å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∑—É—Å—Ç—Ä—ñ—á—ñ.")


@dp.callback_query_handler(lambda c: c.data == 'view_meetings')
async def view_active_meetings(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id

    active_meetings = collection.find({"user_id": user_id})

    if active_meetings:
        response = "üçª–í–∞—à—ñ –∞–∫—Ç–∏–≤–Ω—ñ –∑—É—Å—Ç—Ä—ñ—á—ñ:\n"
        keyboard = InlineKeyboardMarkup(row_width=3)
        for meeting in active_meetings:
            meeting_name = meeting['meeting_name']
            city = meeting['city']
            region = meeting['region']
            datetime = meeting['datetime']
            meeting_id = str(meeting['_id'])

            text = f"ü•Ç{meeting_name}\nüìÖ{datetime}\nüåç{city}, {region}"
            keyboard.add(InlineKeyboardButton(text, callback_data=f'view_meeting:{meeting_id}'))

            button_row = [
                InlineKeyboardButton(f"üñäÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ {meeting_name}", callback_data=f'edit_meeting:{meeting_id}'),
                InlineKeyboardButton(f"‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ {meeting_name}", callback_data=f'cancel_meeting:{meeting_id}'),
                InlineKeyboardButton(f"üîç –î–µ—Ç–∞–ª—å–Ω—ñ—à–µ", callback_data=f'details_meeting:{meeting_id}')
            ]
            keyboard.add(*button_row)

        keyboard.add(InlineKeyboardButton('‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='back_to_menu'))
    else:
        response = "üò¢–ù–∞—Ä–∞–∑—ñ —É –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑—É—Å—Ç—Ä—ñ—á–µ–π."
        keyboard = kb_client

    await bot.send_message(user_id, response, reply_markup=keyboard)







@dp.callback_query_handler(lambda c: c.data == 'back_to_menu')
async def back_to_main_menu(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    await bot.send_message(user_id, 'ü§î–û–±–µ—Ä–∏ –æ–ø—Ü—ñ—é.', reply_markup=kb_client)


@dp.callback_query_handler(lambda c: c.data.startswith('details_meeting:'))
async def view_meeting_details(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    meeting_id = callback_query.data.split(':')[1]

    meeting = collection.find_one({"_id": meeting_id})

    if meeting:
        meeting_name = meeting['meeting_name']
        description = meeting['description']
        city = meeting['city']
        region = meeting['region']
        datetime = meeting['datetime']

        response = f"ü•Ç –ù–∞–∑–≤–∞ –∑—É—Å—Ç—Ä—ñ—á—ñ: {meeting_name}\n" \
                   f"üìù –û–ø–∏—Å: {description}\n" \
                   f"üìÖ –î–∞—Ç–∞ —Ç–∞ —á–∞—Å: {datetime}\n" \
                   f"üåç –õ–æ–∫–∞—Ü—ñ—è: {city}, {region}"

        keyboard = InlineKeyboardMarkup(row_width=1)
        keyboard.add(InlineKeyboardButton(f"üëÄ –•—Ç–æ –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è", callback_data=f'joined_meeting:{meeting_id}'))

        await bot.send_message(user_id, response, reply_markup=keyboard)
    else:
        await bot.send_message(user_id, "–ó—É—Å—Ç—Ä—ñ—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")

@dp.callback_query_handler(lambda c: c.data.startswith('joined_meeting:'))
async def show_joined_users(callback_query: CallbackQuery):
    meeting_id = callback_query.data.split(':')[1]
    meeting = collection.find_one({"_id": meeting_id})

    keyboard = None

    if meeting and 'participants' in meeting:
        participants = meeting['participants']
        if participants:
            buttons = []

            for participant in participants:
                username = participant.get('username', 'No username')
                button = InlineKeyboardButton(username, url=f"https://t.me/{username}")
                buttons.append([button])

            keyboard = InlineKeyboardMarkup(row_width=1, inline_keyboard=buttons)
            keyboard.add(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_list"))

            response = "–°–ø–∏—Å–æ–∫ —É—á–∞—Å–Ω–∏–∫—ñ–≤ –∑—É—Å—Ç—Ä—ñ—á—ñ:"
        else:
            response = "–î–æ —Ü—ñ—î—ó –∑—É—Å—Ç—Ä—ñ—á—ñ —â–µ –Ω—ñ—Ö—Ç–æ –Ω–µ –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è."
            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_list"))
    else:
        response = "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —É—á–∞—Å–Ω–∏–∫—ñ–≤ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Ü—ñ—î—ó –∑—É—Å—Ç—Ä—ñ—á—ñ."

    message = await bot.send_message(callback_query.from_user.id, response, reply_markup=keyboard)

    await dp.current_state().update_data(prev_message_id=message.message_id)




@dp.callback_query_handler(lambda c: c.data == 'back_to_list')
async def back_to_list(callback_query: CallbackQuery):
    data = await dp.current_state().get_data()
    prev_message_id = data.get('prev_message_id')

    await bot.delete_message(callback_query.from_user.id, callback_query.message.message_id)
    await bot.delete_message(callback_query.from_user.id, prev_message_id)












@dp.callback_query_handler(lambda c: c.data.startswith('edit_meeting:'))
async def edit_meeting(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    meeting_id = callback_query.data.split(':')[1]


    meeting = collection.find_one({"_id": ObjectId(meeting_id)})

    if meeting:

        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("üñäÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –Ω–∞–∑–≤—É", callback_data=f'edit_name:{meeting_id}'))
        keyboard.add(InlineKeyboardButton("üìù –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –æ–ø–∏—Å", callback_data=f'edit_description:{meeting_id}'))
        keyboard.add(InlineKeyboardButton("üìÖ –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –¥–∞—Ç—É", callback_data=f'edit_date:{meeting_id}'))
        keyboard.add(InlineKeyboardButton("üåç –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ª–æ–∫–∞—Ü—ñ—é", callback_data=f'edit_location:{meeting_id}'))
        keyboard.add(InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back'))  # –ó–º—ñ–Ω—ñ—Ç—å callback_data –Ω–∞ 'back'


        response = "–í–∏–±–µ—Ä—ñ—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä, —è–∫–∏–π –≤–∏ —Ö–æ—á–µ—Ç–µ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏."
        await bot.send_message(user_id, response, reply_markup=keyboard)
    else:
        await bot.send_message(user_id, "–ó—É—Å—Ç—Ä—ñ—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")



@dp.callback_query_handler(lambda c: c.data == 'back')
async def back_to_meetings_menu(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    active_meetings = collection.find({"user_id": user_id})

    if active_meetings:
        response = "üçª–í–∞—à—ñ –∞–∫—Ç–∏–≤–Ω—ñ –∑—É—Å—Ç—Ä—ñ—á—ñ:\n"
        keyboard = InlineKeyboardMarkup(row_width=3)
        for meeting in active_meetings:
            meeting_name = meeting['meeting_name']
            city = meeting['city']
            region = meeting['region']
            datetime = meeting['datetime']
            meeting_id = str(meeting['_id'])

            text = f"ü•Ç{meeting_name}\nüìÖ{datetime}\nüåç{city}, {region}"
            keyboard.add(InlineKeyboardButton(text, callback_data=f'view_meeting:{meeting_id}'))

            button_row = [
                InlineKeyboardButton(f"üñäÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ {meeting_name}", callback_data=f'edit_meeting:{meeting_id}'),
                InlineKeyboardButton(f"‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ {meeting_name}", callback_data=f'cancel_meeting:{meeting_id}'),
                InlineKeyboardButton(f"üîç –î–µ—Ç–∞–ª—å–Ω—ñ—à–µ", callback_data=f'details_meeting:{meeting_id}')
            ]
            keyboard.add(*button_row)

        keyboard.add(InlineKeyboardButton('‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='back_to_menu'))
    else:
        response = "üò¢–ù–∞—Ä–∞–∑—ñ —É –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑—É—Å—Ç—Ä—ñ—á–µ–π."
        keyboard = kb_client

    await bot.send_message(user_id, response, reply_markup=keyboard)



@dp.callback_query_handler(lambda c: c.data.startswith('edit_name:'))
async def edit_meeting_name(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    meeting_id = callback_query.data.split(':')[1]


    meeting = collection.find_one({"_id": ObjectId(meeting_id)})

    if meeting:
        response = "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –Ω–∞–∑–≤—É –¥–ª—è –∑—É—Å—Ç—Ä—ñ—á—ñ:"


        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back'))

        await bot.send_message(user_id, response, reply_markup=keyboard)

        @dp.message_handler(lambda message: message.from_user.id == user_id)
        async def process_new_meeting_name(message: types.Message):
            new_meeting_name = message.text


            collection.update_one({"_id": ObjectId(meeting_id)}, {"$set": {"meeting_name": new_meeting_name}})

            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton("üñäÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –Ω–∞–∑–≤—É", callback_data=f'edit_name:{meeting_id}'))
            keyboard.add(InlineKeyboardButton("üìù –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –æ–ø–∏—Å", callback_data=f'edit_description:{meeting_id}'))
            keyboard.add(InlineKeyboardButton("üìÖ –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –¥–∞—Ç—É", callback_data=f'edit_date:{meeting_id}'))
            keyboard.add(InlineKeyboardButton("üåç –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ª–æ–∫–∞—Ü—ñ—é", callback_data=f'edit_location:{meeting_id}'))
            keyboard.add(InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back'))


            await bot.send_message(user_id, f"–ù–∞–∑–≤—É –∑—É—Å—Ç—Ä—ñ—á—ñ '{new_meeting_name}' –∑–º—ñ–Ω–µ–Ω–æ. –©–æ –±–∞–∂–∞—î—Ç–µ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –¥–∞–ª—ñ?",
                                   reply_markup=keyboard)
    else:
        await bot.send_message(user_id, "–ó—É—Å—Ç—Ä—ñ—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")

@dp.callback_query_handler(lambda c: c.data.startswith('edit_description:'))
async def edit_meeting_description(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    meeting_id = callback_query.data.split(':')[1]

    meeting = collection.find_one({"_id": ObjectId(meeting_id)})

    if meeting:
        response = "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π –æ–ø–∏—Å –¥–ª—è –∑—É—Å—Ç—Ä—ñ—á—ñ:"

        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back'))

        await bot.send_message(user_id, response, reply_markup=keyboard)

        @dp.message_handler(lambda message: message.from_user.id == user_id)
        async def process_new_meeting_description(message: types.Message):
            new_description = message.text

            collection.update_one({"_id": ObjectId(meeting_id)}, {"$set": {"description": new_description}})

            keyboard = InlineKeyboardMarkup()
            keyboard.add(InlineKeyboardButton("üñäÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –Ω–∞–∑–≤—É", callback_data=f'edit_name:{meeting_id}'))
            keyboard.add(InlineKeyboardButton("üìù –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –æ–ø–∏—Å", callback_data=f'edit_description:{meeting_id}'))
            keyboard.add(InlineKeyboardButton("üìÖ –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –¥–∞—Ç—É", callback_data=f'edit_date:{meeting_id}'))
            keyboard.add(InlineKeyboardButton("üåç –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ª–æ–∫–∞—Ü—ñ—é", callback_data=f'edit_location:{meeting_id}'))
            keyboard.add(InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back'))

            await bot.send_message(user_id, f"–û–ø–∏—Å –∑—É—Å—Ç—Ä—ñ—á—ñ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ '{new_description}'. –©–æ –±–∞–∂–∞—î—Ç–µ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –¥–∞–ª—ñ?",
                                   reply_markup=keyboard)
    else:
        await bot.send_message(user_id, "–ó—É—Å—Ç—Ä—ñ—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")









@dp.callback_query_handler(lambda c: c.data.startswith('edit_month:'))
async def edit_month(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    meeting_id = callback_query.data.split(':')[1]

    meeting = collection.find_one({"_id": ObjectId(meeting_id)})
    current_month = meeting.get('month') if meeting else '–Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ'

    await bot.send_message(user_id, f"–ü–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –∑—É—Å—Ç—Ä—ñ—á—ñ: {current_month}. –í–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π –º—ñ—Å—è—Ü—å:", reply_markup=month_keyboard)

    user_states[user_id] = {'action': 'edit_month', 'meeting_id': meeting_id}

@dp.callback_query_handler(lambda c: c.data.startswith('select_month:'))
async def select_month(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    selected_month = callback_query.data.split(":")[1]
    meeting_id = user_states[user_id]['meeting_id']


    collection.update_one({"_id": ObjectId(meeting_id)}, {"$set": {"month": int(selected_month)}})


    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton("üìÖ –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ä—ñ–∫", callback_data=f'edit_year:{meeting_id}'),
        InlineKeyboardButton("üìÖ –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –º—ñ—Å—è—Ü—å", callback_data=f'edit_month:{meeting_id}'),
    )
    keyboard.add(
        InlineKeyboardButton("üìÖ –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –¥–µ–Ω—å", callback_data=f'edit_day:{meeting_id}'),
        InlineKeyboardButton("üìÖ –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –≥–æ–¥–∏–Ω—É", callback_data=f'edit_hour:{meeting_id}'),
    )
    keyboard.add(
        InlineKeyboardButton("üìÖ –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ö–≤–∏–ª–∏–Ω—É", callback_data=f'edit_minute:{meeting_id}'),
        InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back_date_edit')
    )


    await bot.send_message(user_id, f"–ú—ñ—Å—è—Ü—å –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {selected_month}", reply_markup=keyboard)





@dp.callback_query_handler(lambda c: c.data.startswith('select_month:'))
async def select_month(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    selected_month = callback_query.data.split(":")[1]
    meeting_id = callback_query.data.split(":")[2]


    collection.update_one({"_id": ObjectId(meeting_id)}, {"$set": {"month": int(selected_month)}})

    await bot.send_message(user_id, f"–ú—ñ—Å—è—Ü—å –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {selected_month}")

async def create_back_button():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='back_to_meetings'))
    return keyboard




@dp.callback_query_handler(lambda c: c.data.startswith('cancel_meeting:'))
async def cancel_meeting(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    meeting_id = callback_query.data.split(':')[1]

    if is_valid_uuid(meeting_id):

        meeting = collection.find_one({"_id": meeting_id})

        if meeting:
            try:

                confirmation_keyboard = create_confirmation_keyboard()


                await bot.send_message(user_id, "–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏ –∑—É—Å—Ç—Ä—ñ—á?", reply_markup=confirmation_keyboard)
            except Exception as e:
                print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—ñ –∑—É—Å—Ç—Ä—ñ—á—ñ: {e}")
                await bot.send_message(user_id, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—ñ –∑—É—Å—Ç—Ä—ñ—á—ñ.")
        else:
            await bot.send_message(user_id, "–ó—É—Å—Ç—Ä—ñ—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")
    else:
        await bot.send_message(user_id, "–ù–µ–¥—ñ–π—Å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∑—É—Å—Ç—Ä—ñ—á—ñ.")


@dp.message_handler(lambda message: message.text and message.text != '–¢–∞–∫' and message.from_user.id in cancel_requests)
async def handle_cancel_reason(message: Message):
    user_id = message.from_user.id


    cancel_reason = message.text

    del cancel_requests[user_id]


@dp.callback_query_handler(lambda c: c.data.startswith('cancel_meeting:'))
async def cancel_meeting(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    meeting_id = callback_query.data.split(':')[1]

    if is_valid_uuid(meeting_id):

        meeting = collection.find_one({"_id": meeting_id})

        if meeting:
            try:

                confirmation_keyboard = create_confirmation_keyboard()


                await bot.send_message(user_id, "–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏ –∑—É—Å—Ç—Ä—ñ—á?", reply_markup=confirmation_keyboard)

                cancel_requests[user_id] = {
                    'meeting_id': meeting_id,
                    'meeting_data': meeting
                }
            except Exception as e:
                print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—ñ –∑—É—Å—Ç—Ä—ñ—á—ñ: {e}")
                await bot.send_message(user_id, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—ñ –∑—É—Å—Ç—Ä—ñ—á—ñ.")
        else:
            await bot.send_message(user_id, "–ó—É—Å—Ç—Ä—ñ—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")
    else:
        await bot.send_message(user_id, "–ù–µ–¥—ñ–π—Å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∑—É—Å—Ç—Ä—ñ—á—ñ.")


@dp.callback_query_handler(lambda c: c.data == 'confirm_cancel')
async def confirm_cancel(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id

    if user_id in cancel_requests:
        meeting_data = cancel_requests[user_id]['meeting_data']


        await bot.send_message(user_id, "–í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –ø—Ä–∏—á–∏–Ω—É —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –∑—É—Å—Ç—Ä—ñ—á—ñ:")


@dp.callback_query_handler(lambda c: c.data == 'deny_cancel')
async def deny_cancel(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id

    if user_id in cancel_requests:

        del cancel_requests[user_id]



@dp.callback_query_handler(lambda c: c.data == 'back_to_meetings')
async def back_to_meetings(callback_query: CallbackQuery):
    await view_active_meetings(callback_query)



@dp.callback_query_handler(lambda c: c.data == 'create_meeting', state='*')
async def start_create_meeting(callback_query: CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    user_id = callback_query.from_user.id
    if user_id not in user_states:
        user_states[user_id] = []
    user_states[user_id].append(current_state)

    keyboard_with_back = InlineKeyboardMarkup().add(InlineKeyboardButton('‚Ü©Ô∏è–ù–∞–∑–∞–¥', callback_data='back'))


    await bot.send_message(callback_query.message.chat.id, 'üìù–í–∫–∞–∂—ñ—Ç—å –Ω–∞–∑–≤—É –¥–ª—è –í–∞—à–æ—ó –∑—É—Å—Ç—Ä—ñ—á—ñ:',
                           reply_markup=keyboard_with_back)
    await state.set_state('waiting_for_meeting_name')




@dp.message_handler(lambda message: len(message.text), state='waiting_for_meeting_name')
async def process_meeting_name_input(message: types.Message, state: FSMContext):
    meeting_name = message.text

    async with state.proxy() as data:
        data['meeting_name'] = meeting_name

    keyboard_back = InlineKeyboardMarkup().add(InlineKeyboardButton('‚Ü©Ô∏è–ù–∞–∑–∞–¥', callback_data='back_to_meeting_name'))

    await message.answer('‚úÖ –í–∏ —É—Å–ø—ñ—à–Ω–æ –≤–≤–µ–ª–∏ –Ω–∞–∑–≤—É –∑—É—Å—Ç—Ä—ñ—á—ñ. –¢–µ–ø–µ—Ä –≤–∫–∞–∂—ñ—Ç—å –æ–ø–∏—Å –∑—É—Å—Ç—Ä—ñ—á—ñ:', reply_markup=keyboard_back)
    await state.set_state('waiting_for_description')

@dp.callback_query_handler(lambda c: c.data == 'back_to_meeting_name', state='waiting_for_description')
async def process_back_button_to_meeting_name(callback_query: CallbackQuery, state: FSMContext):
    keyboard_with_back = InlineKeyboardMarkup().add(InlineKeyboardButton('‚Ü©Ô∏è–ù–∞–∑–∞–¥', callback_data='back'))
    await bot.send_message(callback_query.message.chat.id, 'üìù–í–∫–∞–∂—ñ—Ç—å –Ω–∞–∑–≤—É –¥–ª—è –í–∞—à–æ—ó –∑—É—Å—Ç—Ä—ñ—á—ñ:', reply_markup=keyboard_with_back)
    await state.set_state('waiting_for_meeting_name')

@dp.callback_query_handler(lambda c: c.data == 'back', state=['waiting_for_meeting_name', 'waiting_for_description'])
async def process_back_button_to_previous_state(callback_query: CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    if user_id in previous_states:
        previous_state = previous_states[user_id]
        await bot.send_message(callback_query.message.chat.id, previous_state['text'], reply_markup=previous_state['keyboard'])
        await state.set_state(previous_state['state'])

        del previous_states[user_id]
    else:
        await bot.send_message(callback_query.message.chat.id, 'ü§î –í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:', reply_markup=kb_client)
        await state.finish()

@dp.message_handler(lambda message: len(message.text), state='waiting_for_description')
async def process_description_input(message: types.Message, state: FSMContext):
    description = message.text

    async with state.proxy() as data:
        data['description'] = description
        data['previous_state'] = 'waiting_for_description'

    keyboard_back = InlineKeyboardMarkup().add(InlineKeyboardButton('‚Ü©Ô∏è–ù–∞–∑–∞–¥', callback_data='back_to_description'))
    await message.answer('‚úÖ –í–∏ —É—Å–ø—ñ—à–Ω–æ –≤–≤–µ–ª–∏ –æ–ø–∏—Å –∑—É—Å—Ç—Ä—ñ—á—ñ. –¢–µ–ø–µ—Ä –≤–∫–∞–∂—ñ—Ç—å –Ω–∞–∑–≤—É –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É (–º—ñ—Å—Ç–∞), –¥–µ –±—É–¥–µ –∑—É—Å—Ç—Ä—ñ—á:', reply_markup=keyboard_back)
    await state.set_state('waiting_for_town')
@dp.callback_query_handler(lambda c: c.data == 'back_to_description', state='waiting_for_town')
async def process_back_to_description_button(callback_query: CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        previous_message = data.get('previous_message')
        previous_keyboard = data.get('previous_keyboard')
        if previous_message:
            await bot.send_message(callback_query.message.chat.id, previous_message.text, reply_markup=previous_keyboard)
    await state.set_state('waiting_for_description')

@dp.message_handler(state='waiting_for_town')
async def process_town_input(message: types.Message, state: FSMContext):
    selected_town = message.text

    async with state.proxy() as data:
        data['selected_town'] = selected_town
        info = get_info(selected_town)

    if info:
        await state.update_data(info=info)
        towns_info = generate_towns_keyboard(info)
        await message.answer("üîç–í–∏–±–µ—Ä—ñ—Ç—å –Ω–∞—Å–µ–ª–µ–Ω–∏–π –ø—É–Ω–∫—Ç:", reply_markup=towns_info)
        await state.set_state('waiting_for_selected_town')

        previous_states[message.from_user.id] = {
            'state': 'waiting_for_selected_town',
            'text': 'üîç–í–∏–±–µ—Ä—ñ—Ç—å –Ω–∞—Å–µ–ª–µ–Ω–∏–π –ø—É–Ω–∫—Ç:',
            'keyboard': towns_info,
            'data': data,
        }
    else:
        await message.answer("–ù–∞–∑–≤–∞ –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞üò¢. –í–≤–µ–¥—ñ—Ç—å —ñ–Ω—à—É –Ω–∞–∑–≤—É:")

@dp.callback_query_handler(lambda c: c.data == 'back', state=['waiting_for_selected_town', 'waiting_for_selected_street'])
async def process_back_button(callback_query: CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    if current_state == 'waiting_for_selected_street':
        await state.set_state('waiting_for_selected_town')
    else:
        await state.set_state('waiting_for_town')

    await bot.send_message(callback_query.message.chat.id, 'üó∫Ô∏è–í–≤–µ–¥–∏ –Ω–∞–∑–≤—É –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É –¥–µ –±—É–¥–µ –∑—É—Å—Ç—Ä—ñ—á:')


@dp.callback_query_handler(lambda c: c.data.startswith('town_'), state='waiting_for_selected_town')
async def process_selected_town(callback_query: CallbackQuery, state: FSMContext):
    selected_town = callback_query.data.split('_')[1]

    await state.update_data(selected_city=selected_town)

    town_info = get_info(selected_town)

    if town_info:
        city, region = town_info[0].split('(')
        city = city.strip()
        region = region.rstrip(')').strip()

        await state.update_data(selected_region=region)
        location_info = f'‚úÖ–í–∏ –æ–±—Ä–∞–ª–∏ "{city}" ({region} –æ–±–ª.)'


        city_ref = get_city_ref(selected_town)
        if city_ref:
            await state.update_data(city_ref=city_ref)


            keyboard = InlineKeyboardMarkup()
            keyboard.add(
                InlineKeyboardButton(
                    "–ù–∞–∑–∞–¥",
                    callback_data='back_to_city_selection'
                )
            )

            await bot.send_message(callback_query.message.chat.id, f'{location_info}\n\nüõ£Ô∏è –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –≤—É–ª–∏—Ü—ñ:', reply_markup=keyboard)
            await state.set_state('waiting_for_street')
        else:
            await bot.send_message(callback_query.message.chat.id, "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å –º—ñ—Å—Ç–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")



@dp.message_handler(state='waiting_for_street')
async def process_street_input(message: types.Message, state: FSMContext):
    selected_street = message.text

    async with state.proxy() as data:
        city_ref = data.get('city_ref')

    street_list = get_street_list(city_ref, selected_street)
    if street_list:
        await state.update_data(street_list=street_list)
        streets_keyboard = generate_streets_keyboard(street_list)  # –ü—Ä–∏–ø—É—Å—Ç–∏–º–æ, —â–æ –≤–∏ —Å—Ç–≤–æ—Ä–∏—Ç–µ —Ü—é —Ñ—É–Ω–∫—Ü—ñ—é
        await bot.send_message(message.chat.id, "üîç–í–∏–±–µ—Ä—ñ—Ç—å –Ω–∞–∑–≤—É –≤—É–ª–∏—Ü—ñ:", reply_markup=streets_keyboard)
        await state.set_state('waiting_for_selected_street')
    else:
        await bot.send_message(message.chat.id, "–í—É–ª–∏—Ü—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

@dp.callback_query_handler(lambda c: c.data.startswith('street_'), state='waiting_for_selected_street')
async def process_selected_street(callback_query: CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        street_list = data.get('street_list')

    selected_street = callback_query.data

    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –æ–±—Ä–∞–Ω–æ—ó –≤—É–ª–∏—Ü—ñ —É —Å—Ç–∞–Ω—ñ –±–µ–∑ –ø—Ä–µ—Ñ—ñ–∫—Å—É "street_"
    selected_street = selected_street.replace('street_', '')
    await state.update_data(selected_street=selected_street)

    # –ó–∞–ø–∏—Ç –Ω–æ–º–µ—Ä—É –±—É–¥–∏–Ω–∫—É
    await bot.send_message(callback_query.message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –±—É–¥–∏–Ω–∫—É:")
    await state.set_state('waiting_for_house_number')


@dp.message_handler(state='waiting_for_house_number')
async def process_house_number_input(message: types.Message, state: FSMContext):
    house_number = message.text


    await state.update_data(house_number=house_number)


    await bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –∫–æ–º–µ–Ω—Ç–∞—Ä:")
    await state.set_state('waiting_for_comment')


@dp.message_handler(state='waiting_for_comment')
async def process_comment_input(message: types.Message, state: FSMContext):
    comment = message.text


    await state.update_data(comment=comment)


    async with state.proxy() as data:
        selected_street = data.get('selected_street')
        house_number = data.get('house_number')
        comment = data.get('comment')


    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton(
            f"{selected_street} {house_number}, {comment}",
            callback_data='confirm_data'
        )
    )


    keyboard.add(
        InlineKeyboardButton(
            "–ù–∞–∑–∞–¥",
            callback_data='back_to_street_selection'
        )
    )

    await bot.send_message(message.chat.id, "–ù–∞—Ç–∏—Å–Ω–∏ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è:", reply_markup=keyboard)

    await state.set_state('waiting_for_year')

@dp.callback_query_handler(lambda c: c.data == 'back_to_street_selection', state='waiting_for_year')
async def back_to_street_selection(callback_query: CallbackQuery, state: FSMContext):
    await bot.send_message(callback_query.message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –≤—É–ª–∏—Ü—ñ:")
    await state.set_state('waiting_for_street')




@dp.callback_query_handler(lambda c: c.data.startswith('confirm_data'), state='waiting_for_year')
async def process_confirm_data(callback_query: CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        selected_street = data.get('selected_street')
        house_number = data.get('house_number')
        comment = data.get('comment')

    meeting_info = f"–ó—É—Å—Ç—Ä—ñ—á –≤—ñ–¥–±—É–¥–µ—Ç—å—Å—è –ø–æ –≤—É–ª–∏—Ü—ñ {selected_street}, –±—É–¥–∏–Ω–æ–∫ {house_number}. –ö–æ–º–µ–Ω—Ç–∞—Ä: {comment}"


    await bot.send_message(callback_query.message.chat.id, meeting_info)
    await bot.send_message(callback_query.message.chat.id, '–í–∏–±–µ—Ä—ñ—Ç—å —Ä—ñ–∫:', reply_markup=year_keyboard)
    await state.set_state('waiting_for_year')


@dp.callback_query_handler(lambda c: c.data.startswith('select_year:'), state='waiting_for_year')
async def process_year_input(callback_query: CallbackQuery, state: FSMContext):
    selected_year = callback_query.data.split(':')[1]
    selected_year = int(selected_year)

    await bot.send_message(callback_query.message.chat.id, 'üåù–í–∏–±–µ—Ä—ñ—Ç—å –º—ñ—Å—è—Ü—å:', reply_markup=month_keyboard)
    await state.update_data(year=selected_year)
    await state.set_state('waiting_for_month')





@dp.callback_query_handler(lambda c: c.data.startswith('select_month:'), state='waiting_for_month')
async def process_month_input(callback_query: CallbackQuery, state: FSMContext):
    selected_month = callback_query.data.split(':')[1]
    selected_month = int(selected_month)




    async with state.proxy() as data:
        selected_year = data["year"]


    if (selected_year < current_datetime.year) or (selected_year == current_datetime.year and selected_month < current_datetime.month):
        await bot.send_message(callback_query.message.chat.id, "–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–±—Ä–∞—Ç–∏ –º—ñ—Å—è—Ü—å –≤ –º–∏–Ω—É–ª–æ–º—É. –í–∏–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π –º—ñ—Å—è—Ü—å.")
    else:
        await bot.send_message(callback_query.message.chat.id, 'üåù–í–∏–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å:', reply_markup=day_keyboard)
        await state.update_data(month=selected_month)
        await state.set_state('waiting_for_day')
@dp.callback_query_handler(lambda c: c.data.startswith('select_day:'), state='waiting_for_day')
async def process_day_input(callback_query: CallbackQuery, state: FSMContext):
    selected_day = callback_query.data.split(':')[1]
    selected_day = int(selected_day)




    async with state.proxy() as data:
        selected_year = data["year"]
        selected_month = data["month"]

    if (selected_year < current_datetime.year) or \
       (selected_year == current_datetime.year and selected_month < current_datetime.month) or \
       (selected_year == current_datetime.year and selected_month == current_datetime.month and selected_day < current_datetime.day):
        await bot.send_message(callback_query.message.chat.id, "–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–±—Ä–∞—Ç–∏ –¥–µ–Ω—å –≤ –º–∏–Ω—É–ª–æ–º—É. –í–∏–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π –¥–µ–Ω—å.")
    else:
        await bot.send_message(callback_query.message.chat.id, 'üïõ–í–∏–±–µ—Ä—ñ—Ç—å –≥–æ–¥–∏–Ω—É:', reply_markup=hour_keyboard)
        await state.update_data(day=selected_day)
        await state.set_state('waiting_for_hour')


@dp.callback_query_handler(lambda c: c.data.startswith('select_hour:'), state='waiting_for_hour')
async def process_hour_input(callback_query: CallbackQuery, state: FSMContext):
    selected_hour = callback_query.data.split(':')[1]
    selected_hour = int(selected_hour)





    async with state.proxy() as data:
        selected_year = data["year"]
        selected_month = data["month"]
        selected_day = data["day"]


    if (selected_year < current_datetime.year) or \
       (selected_year == current_datetime.year and selected_month < current_datetime.month) or \
       (selected_year == current_datetime.year and selected_month == current_datetime.month and selected_day < current_datetime.day) or \
       (selected_year == current_datetime.year and selected_month == current_datetime.month and selected_day == current_datetime.day and selected_hour < current_datetime.hour):
        await bot.send_message(callback_query.message.chat.id, "–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–±—Ä–∞—Ç–∏ –≥–æ–¥–∏–Ω—É –≤ –º–∏–Ω—É–ª–æ–º—É. –í–∏–±–µ—Ä—ñ—Ç—å —ñ–Ω—à—É –≥–æ–¥–∏–Ω—É.")
    else:
        await bot.send_message(callback_query.message.chat.id, '‚è±Ô∏è–í–∏–±–µ—Ä—ñ—Ç—å —Ö–≤–∏–ª–∏–Ω—É:', reply_markup=minute_keyboard)
        await state.update_data(hour=selected_hour)
        await state.set_state('waiting_for_minute')




@dp.callback_query_handler(lambda c: c.data.startswith('select_minute:'), state='waiting_for_minute')
async def process_minute_input(callback_query: CallbackQuery, state: FSMContext):
    selected_minute = callback_query.data.split(':')[1]
    selected_minute = int(selected_minute)

    async with state.proxy() as data:
        selected_year = data["year"]
        selected_month = data["month"]
        selected_day = data["day"]
        selected_hour = data["hour"]

    if (selected_year < current_datetime.year) or \
       (selected_year == current_datetime.year and selected_month < current_datetime.month) or \
       (selected_year == current_datetime.year and selected_month == current_datetime.month and selected_day < current_datetime.day) or \
       (selected_year == current_datetime.year and selected_month == current_datetime.month and selected_day == current_datetime.day and selected_hour < current_datetime.hour) or \
       (selected_year == current_datetime.year and selected_month == current_datetime.month and selected_day == current_datetime.day and selected_hour == current_datetime.hour and selected_minute < current_datetime.minute):
        await bot.send_message(callback_query.message.chat.id, "–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–±—Ä–∞—Ç–∏ —Ö–≤–∏–ª–∏–Ω—É –≤ –º–∏–Ω—É–ª–æ–º—É. –í–∏–±–µ—Ä—ñ—Ç—å —ñ–Ω—à—É —Ö–≤–∏–ª–∏–Ω—É.")
    else:
        await create_meeting(callback_query, state, selected_minute)

meetings_participants = {}

async def create_meeting(callback_query: CallbackQuery, state: FSMContext, selected_minute: int):
    meeting_id = str(uuid.uuid4())
    async with state.proxy() as data:
        user_id = callback_query.from_user.id
        description = data["description"]
        meeting_name = data["meeting_name"]
        selected_city = data["selected_city"]
        selected_year = data["year"]
        selected_month = data["month"]
        selected_day = data["day"]
        selected_hour = data["hour"]
        selected_region = data["selected_region"]
        selected_street = data.get("selected_street")
        house_number = data.get("house_number")
        comment = data.get("comment")


    date_time = datetime(selected_year, selected_month, selected_day, selected_hour, selected_minute)
    formatted_date_time = date_time.strftime('%Y-%m-%d %H:%M')


    user_data = {
        "_id": meeting_id,
        "user_id": user_id,
        "city": selected_city,
        "region": f"{selected_region} –æ–±–ª.",
        "street": selected_street,
        "house_number": house_number,
        "comment": comment,
        "datetime": formatted_date_time,
        "timestamp": datetime.now(),
        "meeting_name": meeting_name,
        "description": description,
        "participants": []
    }


    user_name = callback_query.from_user.username or callback_query.from_user.first_name


    collection.insert_one(user_data)


    if formatted_date_time not in meetings_participants:
        meetings_participants[formatted_date_time] = [{"user_id": user_id, "username": user_name}]
    else:
        meetings_participants[formatted_date_time].append({"user_id": user_id, "username": user_name})
    if formatted_date_time not in meetings_participants:
        meetings_participants[formatted_date_time] = [user_id]
    else:
        meetings_participants[formatted_date_time].append(user_id)
    response = (
        f"‚úÖ–í–∞—à–∞ –∑—É—Å—Ç—Ä—ñ—á {meeting_name} –≤—ñ–¥–±—É–¥–µ—Ç—å—Å—è —É –º—ñ—Å—Ç—ñ {selected_city}, {selected_region} –æ–±–ª. –Ω–∞ –≤—É–ª–∏—Ü—ñ {selected_street} {house_number}, {comment} "
        f"–î–∞—Ç–∞: {formatted_date_time}"
    )
    await bot.send_message(callback_query.message.chat.id, response)

    join_button_text = "‚úÖ–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è"
    join_button_callback = f"join_{meeting_id}"


    join_button = InlineKeyboardButton(join_button_text, callback_data=join_button_callback)
    keyboard = InlineKeyboardMarkup()
    keyboard.add(join_button)
    post_message = f"–ù–æ–≤–∞ –∑—É—Å—Ç—Ä—ñ—á: {meeting_name} –≤—ñ–¥–±—É–¥–µ—Ç—å—Å—è —É –º—ñ—Å—Ç—ñ {selected_city}, {selected_region} –æ–±–ª. –Ω–∞ –≤—É–ª–∏—Ü—ñ {selected_street} {house_number}, {comment}\n –î–∞—Ç–∞: {formatted_date_time} "
    await bot.send_message(GROUP_ID, post_message, reply_markup=keyboard)

    await state.finish()

    await bot.send_message(callback_query.message.chat.id, "–í–∞—à–∞ –∑—É—Å—Ç—Ä—ñ—á –±—É–ª–∞ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∞.", reply_markup=kb_client)



@dp.callback_query_handler(lambda callback_query: True)
async def join_meeting(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user_name = callback_query.from_user.username or callback_query.from_user.first_name

    meeting_id = callback_query.data.split('_')[1] if '_' in callback_query.data else None

    if meeting_id:

        collection.update_one(
            {"_id": meeting_id},
            {"$addToSet": {"participants": {"user_id": user_id, "username": user_name}}}
        )

        await bot.answer_callback_query(callback_query.id, text="–í–∏ –ø—Ä–∏—î–¥–Ω–∞–ª–∏—Å—å –¥–æ –∑—É—Å—Ç—Ä—ñ—á—ñ!")
    else:
        await bot.answer_callback_query(callback_query.id, text="–ü–æ–º–∏–ª–∫–∞: –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞ –∑—É—Å—Ç—Ä—ñ—á—ñ")

if __name__ == "__main__":
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)

