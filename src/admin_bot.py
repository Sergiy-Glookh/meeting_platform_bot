
import datetime
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram import Bot, Dispatcher, types
from button import *
from connect import TOKEN, collection, GROUP_ID
from api import get_info
from gpt import main
storage = MemoryStorage()
cities = {}
bot = Bot(TOKEN)
dp = Dispatcher(bot, storage=storage)
from aiogram.dispatcher.filters.state import State, StatesGroup

from aiogram.dispatcher import FSMContext


class LocationForm(StatesGroup):
    waiting_for_description = State()
    waiting_for_town = State()
    waiting_for_street = State()
    waiting_for_selected_town = State()
    waiting_for_selected_street = State()
    waiting_for_year = State()
    waiting_for_month = State()
    waiting_for_day = State()
    waiting_for_hour = State()
    last_location = State()

def generate_towns_keyboard(info):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, selective=True)

    for item in info:
        if ' (' in item:
            town, region = item.split(' (')
            region = region.rstrip(')')
            region = f"{region}.–æ–±–ª"
            button_text = f"{town} ({region})"
            keyboard.add(button_text)

    return keyboard


@dp.message_handler(commands=['start'])
async def start_def(message: types.Message):
    await message.answer('–ü—Ä–∏–≤—ñ—Ç, —â–æ —Ö–æ—á–µ—à –∑—Ä–æ–±–∏—Ç–∏?ü§î', reply_markup=kb_client)

# –û–±—Ä–æ–±–Ω–∏–∫ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ê–∫—Ç–∏–≤–Ω—ñ –∑—É—Å—Ç—Ä—ñ—á—ñ"
@dp.message_handler(text=['–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ –∑—É—Å—Ç—Ä—ñ—á—ñüëÄ'])
async def active_meetings(message: types.Message):
    user_id = message.from_user.id

    # –û—Ç—Ä–∏–º–∞—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ –∑—É—Å—Ç—Ä—ñ—á—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    active_meetings = collection.find({"user_id": user_id})

    if active_meetings:
        response = "üçª–í–∞—à—ñ –∞–∫—Ç–∏–≤–Ω—ñ –∑—É—Å—Ç—Ä—ñ—á—ñ:\n"
        for meeting in active_meetings:
            response += f"ü•Ç–ó—É—Å—Ç—Ä—ñ—á —É –º—ñ—Å—Ç—ñ {meeting['city']}, –î–∞—Ç–∞: {meeting['datetime']}\n"
    else:
        response = "üò¢–ù–∞—Ä–∞–∑—ñ —É –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑—É—Å—Ç—Ä—ñ—á–µ–π."

    await message.answer(response)





# –û–±—Ä–æ–±–Ω–∏–∫ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–°—Ç–≤–æ—Ä–∏—Ç–∏ –∑—É—Å—Ç—Ä—ñ—á"
@dp.message_handler(text=['–°—Ç–≤–æ—Ä–∏—Ç–∏ –∑—É—Å—Ç—Ä—ñ—á'])
async def start_create_meeting(message: types.Message, state: FSMContext):
    await message.answer('üó∫Ô∏è–í–≤–µ–¥–∏ –Ω–∞–∑–≤—É –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É –¥–µ –±—É–¥–µ –∑—É—Å—Ç—Ä—ñ—á:')
    await state.set_state('waiting_for_town')  # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –¥–ª—è –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –Ω–∞–∑–≤–∏ –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É


# –û–±—Ä–æ–±–Ω–∏–∫ –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–∞–∑–≤–∏ –º—ñ—Å—Ç–∞
@dp.message_handler(state='waiting_for_town')
async def process_town_input(message: types.Message, state: FSMContext):
    selected_town = message.text

    async with state.proxy() as data:
        data['selected_town'] = selected_town
        info = get_info(selected_town)  # –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –Ω–∞—Å–µ–ª–µ–Ω—ñ –ø—É–Ω–∫—Ç–∏

    if info:
        await state.update_data(info=info)
        towns_info = generate_towns_keyboard(info)
        await message.answer("üîç–í–∏–±–µ—Ä—ñ—Ç—å –Ω–∞—Å–µ–ª–µ–Ω–∏–π –ø—É–Ω–∫—Ç:", reply_markup=towns_info)
        await state.set_state('waiting_for_selected_town')
    else:
        await message.answer("–ù–∞–∑–≤–∞ –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞üò¢. –í–≤–µ–¥—ñ—Ç—å —ñ–Ω—à—É –Ω–∞–∑–≤—É:")



@dp.message_handler(lambda message: message.text, state='waiting_for_selected_town')
async def cmd_choose_city(message: types.Message, state: FSMContext):
    selected_city = message.text

    async with state.proxy() as data:
        selected_region = data.get('selected_region')

    location_info = f'‚úÖ–í–∏ –æ–±—Ä–∞–ª–∏ "{selected_city}""'

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–±—Ä–∞–Ω–∏–π –Ω–∞—Å–µ–ª–µ–Ω–∏–π –ø—É–Ω–∫—Ç —Ç–∞ –º—ñ—Å—Ç–æ —É —Å—Ç–∞–Ω—ñ
    async with state.proxy() as data:
        data['selected_city'] = selected_city
        data['selected_region'] = selected_region

    # –¢–µ–ø–µ—Ä –º–æ–∂–Ω–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –≤–∏–±–æ—Ä–æ–º —Ä–æ–∫—É —ñ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    years_keyboard = generate_years_keyboard()  # –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
    await message.answer(f'{location_info}\n\nüåç–í–∏–±–µ—Ä—ñ—Ç—å —Ä—ñ–∫:', reply_markup=years_keyboard)
    await state.set_state('waiting_for_year')






# –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É —Ä–æ–∫—É
@dp.message_handler(lambda message: message.text.isdigit(), state='waiting_for_year')
async def process_year_input(message: types.Message, state: FSMContext):
    selected_year = int(message.text)
    await message.answer('üåô–í–∏–±–µ—Ä—ñ—Ç—å –º—ñ—Å—è—Ü—å:', reply_markup=month_keyboard)
    await state.update_data(year=selected_year)  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–±—Ä–∞–Ω–∏–π —Ä—ñ–∫ —É —Å—Ç–∞–Ω—ñ
    await state.set_state('waiting_for_month')  # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –¥–ª—è –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –º—ñ—Å—è—Ü—è


# –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –º—ñ—Å—è—Ü—è
@dp.message_handler(lambda message: message.text.isdigit(), state='waiting_for_month')
async def process_month_input(message: types.Message, state: FSMContext):
    selected_month = int(message.text)

    # –û—Ç—Ä–∏–º–∞–π—Ç–µ –ø–æ—Ç–æ—á–Ω—É –¥–∞—Ç—É —ñ —á–∞—Å
    current_datetime = datetime.datetime.now()

    # –û—Ç—Ä–∏–º–∞–π—Ç–µ –¥–∞–Ω—ñ –∑—ñ —Å—Ç–∞–Ω—É
    async with state.proxy() as data:
        selected_year = data["year"]

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –≤–≤–µ–¥–µ–Ω–∏–π –º—ñ—Å—è—Ü—å —î –≤ –º–∞–π–±—É—Ç–Ω—å–æ–º—É –ø–æ—Ä—ñ–≤–Ω—è–Ω–æ –∑ –ø–æ—Ç–æ—á–Ω–∏–º –º—ñ—Å—è—Ü–µ–º —ñ —Ä–æ–∫–æ–º
    if (selected_year < current_datetime.year) or (selected_year == current_datetime.year and selected_month < current_datetime.month):
        await message.answer("–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–±—Ä–∞—Ç–∏ –º—ñ—Å—è—Ü—å –≤ –º–∏–Ω—É–ª–æ–º—É. –í–∏–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π –º—ñ—Å—è—Ü—å.")
    else:
        await message.answer('üåù–í–∏–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å:', reply_markup=day_keyboard)
        await state.update_data(month=selected_month)  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–±—Ä–∞–Ω–∏–π –º—ñ—Å—è—Ü—å —É —Å—Ç–∞–Ω—ñ
        await state.set_state('waiting_for_day')  # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –¥–ª—è –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –¥–Ω—è


# –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –¥–Ω—è
@dp.message_handler(lambda message: message.text.isdigit(), state='waiting_for_day')
async def process_day_input(message: types.Message, state: FSMContext):
    selected_day = int(message.text)

    # –û—Ç—Ä–∏–º–∞–π—Ç–µ –ø–æ—Ç–æ—á–Ω—É –¥–∞—Ç—É —ñ —á–∞—Å
    current_datetime = datetime.datetime.now()

    # –û—Ç—Ä–∏–º–∞–π—Ç–µ –¥–∞–Ω—ñ –∑—ñ —Å—Ç–∞–Ω—É
    async with state.proxy() as data:
        selected_year = data["year"]
        selected_month = data["month"]

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –≤–≤–µ–¥–µ–Ω–∏–π –¥–µ–Ω—å —î –≤ –º–∞–π–±—É—Ç–Ω—å–æ–º—É –ø–æ—Ä—ñ–≤–Ω—è–Ω–æ –∑ –ø–æ—Ç–æ—á–Ω–∏–º —Ä–æ–∫–æ–º, –º—ñ—Å—è—Ü–µ–º —ñ –¥–Ω–µ–º
    if (selected_year < current_datetime.year) or \
       (selected_year == current_datetime.year and selected_month < current_datetime.month) or \
       (selected_year == current_datetime.year and selected_month == current_datetime.month and selected_day < current_datetime.day):
        await message.answer("–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–±—Ä–∞—Ç–∏ –¥–µ–Ω—å –≤ –º–∏–Ω—É–ª–æ–º—É. –í–∏–±–µ—Ä—ñ—Ç—å —ñ–Ω—à–∏–π –¥–µ–Ω—å.")
    else:
        await message.answer('üïõ–í–∏–±–µ—Ä—ñ—Ç—å –≥–æ–¥–∏–Ω—É:', reply_markup=hour_keyboard)
        await state.update_data(day=selected_day)  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–±—Ä–∞–Ω–∏–π –¥–µ–Ω—å —É —Å—Ç–∞–Ω—ñ
        await state.set_state('waiting_for_hour')  # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –¥–ª—è –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≥–æ–¥–∏–Ω–∏


# –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –≥–æ–¥–∏–Ω–∏
@dp.message_handler(lambda message: message.text.isdigit(), state='waiting_for_hour')
async def process_hour_input(message: types.Message, state: FSMContext):
    selected_hour = int(message.text)

    # –û—Ç—Ä–∏–º–∞–π—Ç–µ –ø–æ—Ç–æ—á–Ω—É –¥–∞—Ç—É —ñ —á–∞—Å
    current_datetime = datetime.datetime.now()

    # –û—Ç—Ä–∏–º–∞–π—Ç–µ –¥–∞–Ω—ñ –∑—ñ —Å—Ç–∞–Ω—É
    async with state.proxy() as data:
        selected_year = data["year"]
        selected_month = data["month"]
        selected_day = data["day"]

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –≤–≤–µ–¥–µ–Ω–∞ –≥–æ–¥–∏–Ω–∞ —î –≤ –º–∞–π–±—É—Ç–Ω—å–æ–º—É –ø–æ—Ä—ñ–≤–Ω—è–Ω–æ –∑ –ø–æ—Ç–æ—á–Ω–∏–º —á–∞—Å–æ–º
    if (selected_year < current_datetime.year) or \
       (selected_year == current_datetime.year and selected_month < current_datetime.month) or \
       (selected_year == current_datetime.year and selected_month == current_datetime.month and selected_day < current_datetime.day) or \
       (selected_year == current_datetime.year and selected_month == current_datetime.month and selected_day == current_datetime.day and selected_hour < current_datetime.hour):
        await message.answer("–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–±—Ä–∞—Ç–∏ –≥–æ–¥–∏–Ω—É –≤ –º–∏–Ω—É–ª–æ–º—É. –í–∏–±–µ—Ä—ñ—Ç—å —ñ–Ω—à—É –≥–æ–¥–∏–Ω—É.")
    else:
        await message.answer('‚è±Ô∏è–í–∏–±–µ—Ä—ñ—Ç—å —Ö–≤–∏–ª–∏–Ω—É:', reply_markup=minute_keyboard)
        await state.update_data(hour=selected_hour)  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–±—Ä–∞–Ω—É –≥–æ–¥–∏–Ω—É —É —Å—Ç–∞–Ω—ñ
        await state.set_state('waiting_for_minute')  # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –¥–ª—è –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —Ö–≤–∏–ª–∏–Ω–∏


# –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É —Ö–≤–∏–ª–∏–Ω–∏
@dp.message_handler(lambda message: message.text.isdigit(), state='waiting_for_minute')
async def process_minute_input(message: types.Message, state: FSMContext):
    selected_minute = int(message.text)

    # –û—Ç—Ä–∏–º–∞–π—Ç–µ –ø–æ—Ç–æ—á–Ω—É –¥–∞—Ç—É —ñ —á–∞—Å
    current_datetime = datetime.datetime.now()

    # –û—Ç—Ä–∏–º–∞–π—Ç–µ –¥–∞–Ω—ñ –∑—ñ —Å—Ç–∞–Ω—É
    async with state.proxy() as data:
        selected_year = data["year"]
        selected_month = data["month"]
        selected_day = data["day"]
        selected_hour = data["hour"]

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –≤–≤–µ–¥–µ–Ω–∞ —Ö–≤–∏–ª–∏–Ω–∞ —î –≤ –º–∞–π–±—É—Ç–Ω—å–æ–º—É –ø–æ—Ä—ñ–≤–Ω—è–Ω–æ –∑ –ø–æ—Ç–æ—á–Ω–∏–º —á–∞—Å–æ–º
    if (selected_year < current_datetime.year) or \
       (selected_year == current_datetime.year and selected_month < current_datetime.month) or \
       (selected_year == current_datetime.year and selected_month == current_datetime.month and selected_day < current_datetime.day) or \
       (selected_year == current_datetime.year and selected_month == current_datetime.month and selected_day == current_datetime.day and selected_hour < current_datetime.hour) or \
       (selected_year == current_datetime.year and selected_month == current_datetime.month and selected_day == current_datetime.day and selected_hour == current_datetime.hour and selected_minute < current_datetime.minute):
        await message.answer("–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–±—Ä–∞—Ç–∏ —Ö–≤–∏–ª–∏–Ω—É –≤ –º–∏–Ω—É–ª–æ–º—É. –í–∏–±–µ—Ä—ñ—Ç—å —ñ–Ω—à—É —Ö–≤–∏–ª–∏–Ω—É.")
    else:
        async with state.proxy() as data:
            user_id = message.from_user.id
            selected_city = data["selected_city"]
            selected_year = data["year"]
            selected_month = data["month"]
            selected_day = data["day"]
            selected_hour = data["hour"]

        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –¥–∞—Ç—É —Ç–∞ —á–∞—Å
        date_time = datetime.datetime(selected_year, selected_month, selected_day, selected_hour, selected_minute)
        formatted_date_time = date_time.strftime('%Y-%m-%d –æ %H:%M –≥–æ–¥–∏–Ω—ñ')

        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤—Å—ñ—î—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
        user_data = {
            "user_id": user_id,
            "city": selected_city,
            "datetime": formatted_date_time,
            "timestamp": datetime.datetime.now()
        }
        collection.insert_one(user_data)

        # –í–∏–≤—ñ–¥ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∑—É—Å—Ç—Ä—ñ—á
        response = (
            f"‚úÖ–í–∞—à–∞ –∑—É—Å—Ç—Ä—ñ—á –≤—ñ–¥–±—É–¥–µ—Ç—å—Å—è —É –º—ñ—Å—Ç—ñ {selected_city}, "
            f" –î–∞—Ç–∞: {formatted_date_time}"
        )
        await message.answer(response)

        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
        join_button = types.InlineKeyboardButton("‚úÖ–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è", callback_data=user_id)
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(join_button)

        # –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É –≥—Ä—É–ø—ñ –∑ –∫–Ω–æ–ø–∫–æ—é
        post_message = f"–ù–æ–≤–∞ –∑—É—Å—Ç—Ä—ñ—á: {formatted_date_time} —É {selected_city}"
        await bot.send_message(GROUP_ID, post_message, reply_markup=keyboard)

        await state.finish()
        await message.answer('–ó—É—Å—Ç—Ä—ñ—á —Å—Ç–≤–æ—Ä–µ–Ω–æ, –≤—ñ—Ç–∞—éü•≥',
                             reply_markup=kb_client)
        await state.finish()


# –û–±—Ä–æ–±–Ω–∏–∫ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è"
@dp.callback_query_handler(lambda callback_query: True)
async def join_meeting(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id


    doc = {
        "add_user": user_id
    }
    collection.insert_one(doc)
    await bot.answer_callback_query(callback_query.id, text="–í–∏ –ø—Ä–∏—î–¥–Ω–∞–ª–∏—Å—å –¥–æ –∑—É—Å—Ç—Ä—ñ—á—ñ!")



async def on_startup(_):
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ')



if __name__ == "__main__":
    from aiogram import executor

    executor.start_polling(dp, on_startup=on_startup)
